/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package teamseven.lasertag;

import java.io.IOException;
import java.util.ArrayList;

/**
 *
 * @author Daijon Roberts & Drew Stull & Landon Grazer
 */
public class EntryTerminal extends javax.swing.JFrame {

    /**
     * Creates new form EntryTerminal
     */
    public Database db;
    public Boolean isVisibil = true;

    //we need an arrayList of strings to store the code name
    //for each team
    //first just starting with the red team
    public ArrayList<Integer> redTeamNameList = new ArrayList<>();
    //now green team
    public ArrayList<Integer> greenTeamNameList = new ArrayList<>();


//we're gonna have to add a member variable that is an instance of our database
    public EntryTerminal() {
        initComponents();
        db = new Database();
        db.openDatabase();
        db.readRecords();
//when we intialize we'll call DB.connect();
//we do this so we can use DB.createRecord and DB.querry in our methods for textFields.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        redTeamPanel = new javax.swing.JPanel();
        redTeamLabel = new javax.swing.JLabel();
        redTeamCheckBox0 = new javax.swing.JCheckBox();
        redTeamUserIdTextField0 = new javax.swing.JFormattedTextField();
        redTeamCodeNameTextField0 = new javax.swing.JFormattedTextField();
        redTeamCheckBox1 = new javax.swing.JCheckBox();
        redTeamCheckBox2 = new javax.swing.JCheckBox();
        redTeamCheckBox3 = new javax.swing.JCheckBox();
        redTeamCheckBox4 = new javax.swing.JCheckBox();
        redTeamCheckBox5 = new javax.swing.JCheckBox();
        redTeamCheckBox6 = new javax.swing.JCheckBox();
        redTeamCheckBox7 = new javax.swing.JCheckBox();
        redTeamCheckBox8 = new javax.swing.JCheckBox();
        redTeamCheckBox9 = new javax.swing.JCheckBox();
        redTeamCheckBox10 = new javax.swing.JCheckBox();
        redTeamCheckBox11 = new javax.swing.JCheckBox();
        redTeamCheckBox12 = new javax.swing.JCheckBox();
        redTeamCheckBox13 = new javax.swing.JCheckBox();
        redTeamCheckBox14 = new javax.swing.JCheckBox();
        redTeamCheckBox15 = new javax.swing.JCheckBox();
        redTeamRow0Label = new javax.swing.JLabel();
        redTeamUserIdTextField1 = new javax.swing.JFormattedTextField();
        redTeamCodeNameTextField1 = new javax.swing.JFormattedTextField();
        redTeamRow1Label = new javax.swing.JLabel();
        redTeamRow2Label = new javax.swing.JLabel();
        redTeamRow3Label = new javax.swing.JLabel();
        redTeamRow4Label = new javax.swing.JLabel();
        redTeamRow5Label = new javax.swing.JLabel();
        redTeamRow6Label = new javax.swing.JLabel();
        redTeamRow7Label = new javax.swing.JLabel();
        redTeamRow8Label = new javax.swing.JLabel();
        redTeamRow9Label = new javax.swing.JLabel();
        redTeamRow10Label = new javax.swing.JLabel();
        redTeamRow11Label = new javax.swing.JLabel();
        redTeamRow12Label = new javax.swing.JLabel();
        redTeamRow13Label = new javax.swing.JLabel();
        redTeamRow14Label = new javax.swing.JLabel();
        redTeamRow15Label = new javax.swing.JLabel();
        redTeamUserIdTextField2 = new javax.swing.JFormattedTextField();
        redTeamCodeNameTextField2 = new javax.swing.JFormattedTextField();
        redTeamUserIdTextField3 = new javax.swing.JFormattedTextField();
        redTeamCodeNameTextField3 = new javax.swing.JFormattedTextField();
        redTeamUserIdTextField4 = new javax.swing.JFormattedTextField();
        redTeamCodeNameTextField4 = new javax.swing.JFormattedTextField();
        redTeamUserIdTextField5 = new javax.swing.JFormattedTextField();
        redTeamCodeNameTextField5 = new javax.swing.JFormattedTextField();
        redTeamUserIdTextField6 = new javax.swing.JFormattedTextField();
        redTeamCodeNameTextField6 = new javax.swing.JFormattedTextField();
        redTeamUserIdTextField7 = new javax.swing.JFormattedTextField();
        redTeamCodeNameTextField7 = new javax.swing.JFormattedTextField();
        redTeamUserIdTextField8 = new javax.swing.JFormattedTextField();
        redTeamCodeNameTextField8 = new javax.swing.JFormattedTextField();
        redTeamUserIdTextField9 = new javax.swing.JFormattedTextField();
        redTeamCodeNameTextField9 = new javax.swing.JFormattedTextField();
        redTeamUserIdTextField10 = new javax.swing.JFormattedTextField();
        redTeamCodeNameTextField10 = new javax.swing.JFormattedTextField();
        redTeamUserIdTextField11 = new javax.swing.JFormattedTextField();
        redTeamCodeNameTextField11 = new javax.swing.JFormattedTextField();
        redTeamUserIdTextField12 = new javax.swing.JFormattedTextField();
        redTeamCodeNameTextField12 = new javax.swing.JFormattedTextField();
        redTeamUserIdTextField13 = new javax.swing.JFormattedTextField();
        redTeamCodeNameTextField13 = new javax.swing.JFormattedTextField();
        redTeamUserIdTextField14 = new javax.swing.JFormattedTextField();
        redTeamCodeNameTextField14 = new javax.swing.JFormattedTextField();
        redTeamUserIdTextField15 = new javax.swing.JFormattedTextField();
        redTeamCodeNameTextField15 = new javax.swing.JFormattedTextField();
        greenTeamPanel = new javax.swing.JPanel();
        greenTeamLabel = new javax.swing.JLabel();
        greenTeamCodeNameTextField0 = new javax.swing.JFormattedTextField();
        greenTeamUserIdTextField0 = new javax.swing.JFormattedTextField();
        greenTeamRow0Label = new javax.swing.JLabel();
        greenTeamCheckBox0 = new javax.swing.JCheckBox();
        greenTeamCheckBox1 = new javax.swing.JCheckBox();
        greenTeamRow1Label = new javax.swing.JLabel();
        greenTeamUserIdTextField1 = new javax.swing.JFormattedTextField();
        greenTeamCodeNameTextField1 = new javax.swing.JFormattedTextField();
        greenTeamCheckBox2 = new javax.swing.JCheckBox();
        greenTeamRow2Label = new javax.swing.JLabel();
        greenTeamUserIdTextField2 = new javax.swing.JFormattedTextField();
        greenTeamCodeNameTextField2 = new javax.swing.JFormattedTextField();
        greenTeamCheckBox3 = new javax.swing.JCheckBox();
        greenTeamRow3Label = new javax.swing.JLabel();
        greenTeamUserIdTextField3 = new javax.swing.JFormattedTextField();
        greenTeamCodeNameTextField3 = new javax.swing.JFormattedTextField();
        greenTeamCheckBox4 = new javax.swing.JCheckBox();
        greenTeamRow4Label = new javax.swing.JLabel();
        greenTeamUserIdTextField4 = new javax.swing.JFormattedTextField();
        greenTeamCodeNameTextField4 = new javax.swing.JFormattedTextField();
        greenTeamCheckBox5 = new javax.swing.JCheckBox();
        greenTeamRow5Label = new javax.swing.JLabel();
        greenTeamUserIdTextField5 = new javax.swing.JFormattedTextField();
        greenTeamCodeNameTextField5 = new javax.swing.JFormattedTextField();
        greenTeamCheckBox6 = new javax.swing.JCheckBox();
        greenTeamRow6Label = new javax.swing.JLabel();
        greenTeamUserIdTextField6 = new javax.swing.JFormattedTextField();
        greenTeamCodeNameTextField6 = new javax.swing.JFormattedTextField();
        greenTeamCheckBox7 = new javax.swing.JCheckBox();
        greenTeamRow7Label = new javax.swing.JLabel();
        greenTeamUserIdTextField7 = new javax.swing.JFormattedTextField();
        greenTeamCodeNameTextField7 = new javax.swing.JFormattedTextField();
        greenTeamCheckBox8 = new javax.swing.JCheckBox();
        greenTeamRow8Label = new javax.swing.JLabel();
        greenTeamUserIdTextField8 = new javax.swing.JFormattedTextField();
        greenTeamCodeNameTextField8 = new javax.swing.JFormattedTextField();
        greenTeamCheckBox9 = new javax.swing.JCheckBox();
        greenTeamRow9Label = new javax.swing.JLabel();
        greenTeamUserIdTextField9 = new javax.swing.JFormattedTextField();
        greenTeamCodeNameTextField9 = new javax.swing.JFormattedTextField();
        greenTeamCheckBox10 = new javax.swing.JCheckBox();
        greenTeamRow10Label = new javax.swing.JLabel();
        greenTeamUserIdTextField10 = new javax.swing.JFormattedTextField();
        greenTeamCodeNameTextField10 = new javax.swing.JFormattedTextField();
        greenTeamCheckBox11 = new javax.swing.JCheckBox();
        greenTeamRow11Label = new javax.swing.JLabel();
        greenTeamUserIdTextField11 = new javax.swing.JFormattedTextField();
        greenTeamCodeNameTextField11 = new javax.swing.JFormattedTextField();
        greenTeamCheckBox12 = new javax.swing.JCheckBox();
        greenTeamRow12Label = new javax.swing.JLabel();
        greenTeamUserIdTextField12 = new javax.swing.JFormattedTextField();
        greenTeamCodeNameTextField12 = new javax.swing.JFormattedTextField();
        greenTeamCheckBox13 = new javax.swing.JCheckBox();
        greenTeamRow13Label = new javax.swing.JLabel();
        greenTeamUserIdTextField13 = new javax.swing.JFormattedTextField();
        greenTeamCodeNameTextField13 = new javax.swing.JFormattedTextField();
        greenTeamCheckBox14 = new javax.swing.JCheckBox();
        greenTeamRow14Label = new javax.swing.JLabel();
        greenTeamUserIdTextField14 = new javax.swing.JFormattedTextField();
        greenTeamCodeNameTextField14 = new javax.swing.JFormattedTextField();
        greenTeamCheckBox15 = new javax.swing.JCheckBox();
        greenTeamRow15Label = new javax.swing.JLabel();
        greenTeamUserIdTextField15 = new javax.swing.JFormattedTextField();
        greenTeamCodeNameTextField15 = new javax.swing.JFormattedTextField();
        backgroundPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Entry Terminal");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(0, 15, 83));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        redTeamPanel.setBackground(new java.awt.Color(153, 0, 0));

        redTeamLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        redTeamLabel.setForeground(new java.awt.Color(255, 255, 255));
        redTeamLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        redTeamLabel.setText("RED TEAM");

        redTeamCheckBox0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamCheckBox0ActionPerformed(evt);
            }
        });

        redTeamUserIdTextField0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamUserIdTextField0ActionPerformed(evt);
            }
        });
        redTeamUserIdTextField0.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamUserIdTextField0KeyReleased(evt);
            }
        });

        redTeamCodeNameTextField0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamCodeNameTextField0ActionPerformed(evt);
            }
        });
        redTeamCodeNameTextField0.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamCodeNameTextField0KeyReleased(evt);
            }
        });

        redTeamCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamCheckBox1ActionPerformed(evt);
            }
        });

        redTeamCheckBox12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamCheckBox12ActionPerformed(evt);
            }
        });

        redTeamRow0Label.setText("0");

        redTeamUserIdTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamUserIdTextField1ActionPerformed(evt);
            }
        });
        redTeamUserIdTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamUserIdTextField1KeyReleased(evt);
            }
        });

        redTeamCodeNameTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamCodeNameTextField1ActionPerformed(evt);
            }
        });
        redTeamCodeNameTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamCodeNameTextField1KeyReleased(evt);
            }
        });

        redTeamRow1Label.setText("1");

        redTeamRow2Label.setText("2");

        redTeamRow3Label.setText("3");

        redTeamRow4Label.setText("4");

        redTeamRow5Label.setText("5");

        redTeamRow6Label.setText("6");

        redTeamRow7Label.setText("7");

        redTeamRow8Label.setText("8");

        redTeamRow9Label.setText("9");

        redTeamRow10Label.setText("10");

        redTeamRow11Label.setText("11");

        redTeamRow12Label.setText("12");

        redTeamRow13Label.setText("13");

        redTeamRow14Label.setText("14");

        redTeamRow15Label.setText("15");

        redTeamUserIdTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamUserIdTextField2ActionPerformed(evt);
            }
        });
        redTeamUserIdTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamUserIdTextField2KeyReleased(evt);
            }
        });

        redTeamCodeNameTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamCodeNameTextField2ActionPerformed(evt);
            }
        });
        redTeamCodeNameTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamCodeNameTextField2KeyReleased(evt);
            }
        });

        redTeamUserIdTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamUserIdTextField3ActionPerformed(evt);
            }
        });
        redTeamUserIdTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamUserIdTextField3KeyReleased(evt);
            }
        });

        redTeamCodeNameTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamCodeNameTextField3ActionPerformed(evt);
            }
        });
        redTeamCodeNameTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamCodeNameTextField3KeyReleased(evt);
            }
        });

        redTeamUserIdTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamUserIdTextField4ActionPerformed(evt);
            }
        });
        redTeamUserIdTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamUserIdTextField4KeyReleased(evt);
            }
        });

        redTeamCodeNameTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamCodeNameTextField4ActionPerformed(evt);
            }
        });
        redTeamCodeNameTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamCodeNameTextField4KeyReleased(evt);
            }
        });

        redTeamUserIdTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamUserIdTextField5ActionPerformed(evt);
            }
        });
        redTeamUserIdTextField5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamUserIdTextField5KeyReleased(evt);
            }
        });

        redTeamCodeNameTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamCodeNameTextField5ActionPerformed(evt);
            }
        });
        redTeamCodeNameTextField5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamCodeNameTextField5KeyReleased(evt);
            }
        });

        redTeamUserIdTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamUserIdTextField6ActionPerformed(evt);
            }
        });
        redTeamUserIdTextField6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamUserIdTextField6KeyReleased(evt);
            }
        });

        redTeamCodeNameTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamCodeNameTextField6ActionPerformed(evt);
            }
        });
        redTeamCodeNameTextField6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamCodeNameTextField6KeyReleased(evt);
            }
        });

        redTeamUserIdTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamUserIdTextField7ActionPerformed(evt);
            }
        });
        redTeamUserIdTextField7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamUserIdTextField7KeyReleased(evt);
            }
        });

        redTeamCodeNameTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamCodeNameTextField7ActionPerformed(evt);
            }
        });
        redTeamCodeNameTextField7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamCodeNameTextField7KeyReleased(evt);
            }
        });

        redTeamUserIdTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamUserIdTextField8ActionPerformed(evt);
            }
        });
        redTeamUserIdTextField8.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamUserIdTextField8KeyReleased(evt);
            }
        });

        redTeamCodeNameTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamCodeNameTextField8ActionPerformed(evt);
            }
        });
        redTeamCodeNameTextField8.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamCodeNameTextField8KeyReleased(evt);
            }
        });

        redTeamUserIdTextField9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamUserIdTextField9ActionPerformed(evt);
            }
        });
        redTeamUserIdTextField9.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamUserIdTextField9KeyReleased(evt);
            }
        });

        redTeamCodeNameTextField9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamCodeNameTextField9ActionPerformed(evt);
            }
        });
        redTeamCodeNameTextField9.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamCodeNameTextField9KeyReleased(evt);
            }
        });

        redTeamUserIdTextField10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamUserIdTextField10ActionPerformed(evt);
            }
        });
        redTeamUserIdTextField10.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamUserIdTextField10KeyReleased(evt);
            }
        });

        redTeamCodeNameTextField10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamCodeNameTextField10ActionPerformed(evt);
            }
        });
        redTeamCodeNameTextField10.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamCodeNameTextField10KeyReleased(evt);
            }
        });

        redTeamUserIdTextField11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamUserIdTextField11ActionPerformed(evt);
            }
        });
        redTeamUserIdTextField11.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamUserIdTextField11KeyReleased(evt);
            }
        });

        redTeamCodeNameTextField11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamCodeNameTextField11ActionPerformed(evt);
            }
        });
        redTeamCodeNameTextField11.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamCodeNameTextField11KeyReleased(evt);
            }
        });

        redTeamUserIdTextField12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamUserIdTextField12ActionPerformed(evt);
            }
        });
        redTeamUserIdTextField12.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamUserIdTextField12KeyReleased(evt);
            }
        });

        redTeamCodeNameTextField12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamCodeNameTextField12ActionPerformed(evt);
            }
        });
        redTeamCodeNameTextField12.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamCodeNameTextField12KeyReleased(evt);
            }
        });

        redTeamUserIdTextField13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamUserIdTextField13ActionPerformed(evt);
            }
        });
        redTeamUserIdTextField13.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamUserIdTextField13KeyReleased(evt);
            }
        });

        redTeamCodeNameTextField13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamCodeNameTextField13ActionPerformed(evt);
            }
        });
        redTeamCodeNameTextField13.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamCodeNameTextField13KeyReleased(evt);
            }
        });

        redTeamUserIdTextField14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamUserIdTextField14ActionPerformed(evt);
            }
        });
        redTeamUserIdTextField14.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamUserIdTextField14KeyReleased(evt);
            }
        });

        redTeamCodeNameTextField14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamCodeNameTextField14ActionPerformed(evt);
            }
        });
        redTeamCodeNameTextField14.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamCodeNameTextField14KeyReleased(evt);
            }
        });

        redTeamUserIdTextField15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamUserIdTextField15ActionPerformed(evt);
            }
        });
        redTeamUserIdTextField15.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamUserIdTextField15KeyReleased(evt);
            }
        });

        redTeamCodeNameTextField15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redTeamCodeNameTextField15ActionPerformed(evt);
            }
        });
        redTeamCodeNameTextField15.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTeamCodeNameTextField15KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout redTeamPanelLayout = new javax.swing.GroupLayout(redTeamPanel);
        redTeamPanel.setLayout(redTeamPanelLayout);
        redTeamPanelLayout.setHorizontalGroup(
            redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, redTeamPanelLayout.createSequentialGroup()
                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(redTeamPanelLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(redTeamCheckBox15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(redTeamCheckBox14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(redTeamCheckBox13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(redTeamCheckBox12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(redTeamCheckBox11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(redTeamCheckBox10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(redTeamCheckBox9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(redTeamCheckBox8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(redTeamCheckBox7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(redTeamCheckBox6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(redTeamCheckBox5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(redTeamCheckBox4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(redTeamCheckBox3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(redTeamCheckBox2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(redTeamCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(redTeamCheckBox0, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, redTeamPanelLayout.createSequentialGroup()
                                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(redTeamRow10Label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(redTeamRow11Label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(redTeamPanelLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(redTeamUserIdTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(redTeamCodeNameTextField11))
                                    .addGroup(redTeamPanelLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(redTeamUserIdTextField10, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                                        .addGap(157, 157, 157))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, redTeamPanelLayout.createSequentialGroup()
                                    .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(redTeamPanelLayout.createSequentialGroup()
                                            .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(redTeamRow1Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(redTeamRow0Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGap(12, 12, 12)
                                            .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(redTeamUserIdTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                                                .addComponent(redTeamUserIdTextField0)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, redTeamPanelLayout.createSequentialGroup()
                                            .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(redTeamRow8Label)
                                                .addComponent(redTeamRow9Label)
                                                .addComponent(redTeamRow7Label)
                                                .addComponent(redTeamRow6Label)
                                                .addComponent(redTeamRow5Label)
                                                .addComponent(redTeamRow4Label)
                                                .addComponent(redTeamRow3Label)
                                                .addComponent(redTeamRow2Label))
                                            .addGap(12, 12, 12)
                                            .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(redTeamUserIdTextField2)
                                                .addComponent(redTeamUserIdTextField3)
                                                .addComponent(redTeamUserIdTextField4)
                                                .addComponent(redTeamUserIdTextField5)
                                                .addComponent(redTeamUserIdTextField6)
                                                .addComponent(redTeamUserIdTextField7)
                                                .addComponent(redTeamUserIdTextField9)
                                                .addComponent(redTeamUserIdTextField8))))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(redTeamCodeNameTextField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                                        .addComponent(redTeamCodeNameTextField2, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(redTeamCodeNameTextField3)
                                        .addComponent(redTeamCodeNameTextField4)
                                        .addComponent(redTeamCodeNameTextField5)
                                        .addComponent(redTeamCodeNameTextField6)
                                        .addComponent(redTeamCodeNameTextField7)
                                        .addComponent(redTeamCodeNameTextField8)
                                        .addComponent(redTeamCodeNameTextField9)
                                        .addComponent(redTeamCodeNameTextField10)
                                        .addComponent(redTeamCodeNameTextField0, javax.swing.GroupLayout.Alignment.TRAILING)))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, redTeamPanelLayout.createSequentialGroup()
                                    .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(redTeamRow15Label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(redTeamRow14Label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(redTeamPanelLayout.createSequentialGroup()
                                            .addGap(6, 6, 6)
                                            .addComponent(redTeamUserIdTextField14, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE))
                                        .addGroup(redTeamPanelLayout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(redTeamUserIdTextField15)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(redTeamCodeNameTextField15, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)))
                            .addGroup(redTeamPanelLayout.createSequentialGroup()
                                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(redTeamUserIdTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, redTeamPanelLayout.createSequentialGroup()
                                            .addComponent(redTeamRow13Label)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(redTeamUserIdTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(redTeamRow12Label))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(redTeamCodeNameTextField12)
                                    .addComponent(redTeamCodeNameTextField14)
                                    .addComponent(redTeamCodeNameTextField13)))))
                    .addComponent(redTeamLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        redTeamPanelLayout.setVerticalGroup(
            redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(redTeamPanelLayout.createSequentialGroup()
                .addComponent(redTeamLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(redTeamCodeNameTextField0)
                    .addComponent(redTeamCheckBox0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(redTeamRow0Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(redTeamUserIdTextField0))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redTeamCheckBox1)
                    .addComponent(redTeamUserIdTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(redTeamCodeNameTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(redTeamRow1Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redTeamCheckBox2)
                    .addComponent(redTeamRow2Label)
                    .addComponent(redTeamUserIdTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(redTeamCodeNameTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redTeamCheckBox3)
                    .addComponent(redTeamRow3Label)
                    .addComponent(redTeamUserIdTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(redTeamCodeNameTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redTeamCheckBox4)
                    .addComponent(redTeamRow4Label)
                    .addComponent(redTeamUserIdTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(redTeamCodeNameTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redTeamCheckBox5)
                    .addComponent(redTeamRow5Label)
                    .addComponent(redTeamUserIdTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(redTeamCodeNameTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redTeamCheckBox6)
                    .addComponent(redTeamRow6Label)
                    .addComponent(redTeamUserIdTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(redTeamCodeNameTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redTeamCheckBox7)
                    .addComponent(redTeamRow7Label)
                    .addComponent(redTeamUserIdTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(redTeamCodeNameTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redTeamCheckBox8)
                    .addComponent(redTeamRow8Label)
                    .addComponent(redTeamUserIdTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(redTeamCodeNameTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redTeamCheckBox9)
                    .addComponent(redTeamRow9Label)
                    .addComponent(redTeamUserIdTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(redTeamCodeNameTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redTeamCheckBox10)
                    .addComponent(redTeamRow10Label)
                    .addComponent(redTeamUserIdTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(redTeamCodeNameTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(redTeamCheckBox11)
                        .addComponent(redTeamRow11Label)
                        .addComponent(redTeamUserIdTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(redTeamCodeNameTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redTeamCheckBox12)
                    .addComponent(redTeamRow12Label)
                    .addComponent(redTeamUserIdTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(redTeamCodeNameTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redTeamCheckBox13)
                    .addComponent(redTeamRow13Label)
                    .addComponent(redTeamUserIdTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(redTeamCodeNameTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redTeamCheckBox14)
                    .addComponent(redTeamRow14Label)
                    .addComponent(redTeamUserIdTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(redTeamCodeNameTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(redTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redTeamCheckBox15)
                    .addComponent(redTeamRow15Label)
                    .addComponent(redTeamUserIdTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(redTeamCodeNameTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        greenTeamPanel.setBackground(new java.awt.Color(0, 153, 0));
        greenTeamPanel.setForeground(new java.awt.Color(51, 255, 0));

        greenTeamLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        greenTeamLabel.setForeground(new java.awt.Color(255, 255, 255));
        greenTeamLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        greenTeamLabel.setText("GREEN TEAM");

        greenTeamCodeNameTextField0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamCodeNameTextField0ActionPerformed(evt);
            }
        });
        greenTeamCodeNameTextField0.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamCodeNameTextField0KeyReleased(evt);
            }
        });

        greenTeamUserIdTextField0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamUserIdTextField0ActionPerformed(evt);
            }
        });
        greenTeamUserIdTextField0.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamUserIdTextField0KeyReleased(evt);
            }
        });

        greenTeamRow0Label.setText("0");

        greenTeamCheckBox0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamCheckBox0ActionPerformed(evt);
            }
        });

        greenTeamCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamCheckBox1ActionPerformed(evt);
            }
        });

        greenTeamRow1Label.setText("1");

        greenTeamUserIdTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamUserIdTextField1ActionPerformed(evt);
            }
        });
        greenTeamUserIdTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamUserIdTextField1KeyReleased(evt);
            }
        });

        greenTeamCodeNameTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamCodeNameTextField1ActionPerformed(evt);
            }
        });
        greenTeamCodeNameTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamCodeNameTextField1KeyReleased(evt);
            }
        });

        greenTeamRow2Label.setText("2");

        greenTeamUserIdTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamUserIdTextField2ActionPerformed(evt);
            }
        });
        greenTeamUserIdTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamUserIdTextField2KeyReleased(evt);
            }
        });

        greenTeamCodeNameTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamCodeNameTextField2ActionPerformed(evt);
            }
        });
        greenTeamCodeNameTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamCodeNameTextField2KeyReleased(evt);
            }
        });

        greenTeamRow3Label.setText("3");

        greenTeamUserIdTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamUserIdTextField3ActionPerformed(evt);
            }
        });
        greenTeamUserIdTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamUserIdTextField3KeyReleased(evt);
            }
        });

        greenTeamCodeNameTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamCodeNameTextField3ActionPerformed(evt);
            }
        });
        greenTeamCodeNameTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamCodeNameTextField3KeyReleased(evt);
            }
        });

        greenTeamCheckBox4.setText("jCheckBox1");

        greenTeamRow4Label.setText("4");

        greenTeamUserIdTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamUserIdTextField4ActionPerformed(evt);
            }
        });
        greenTeamUserIdTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamUserIdTextField4KeyReleased(evt);
            }
        });

        greenTeamCodeNameTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamCodeNameTextField4ActionPerformed(evt);
            }
        });
        greenTeamCodeNameTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamCodeNameTextField4KeyReleased(evt);
            }
        });

        greenTeamRow5Label.setText("5");

        greenTeamUserIdTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamUserIdTextField5ActionPerformed(evt);
            }
        });
        greenTeamUserIdTextField5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamUserIdTextField5KeyReleased(evt);
            }
        });

        greenTeamCodeNameTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamCodeNameTextField5ActionPerformed(evt);
            }
        });
        greenTeamCodeNameTextField5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamCodeNameTextField5KeyReleased(evt);
            }
        });

        greenTeamRow6Label.setText("6");

        greenTeamUserIdTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamUserIdTextField6ActionPerformed(evt);
            }
        });
        greenTeamUserIdTextField6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamUserIdTextField6KeyReleased(evt);
            }
        });

        greenTeamCodeNameTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamCodeNameTextField6ActionPerformed(evt);
            }
        });
        greenTeamCodeNameTextField6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamCodeNameTextField6KeyReleased(evt);
            }
        });

        greenTeamRow7Label.setText("7");

        greenTeamUserIdTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamUserIdTextField7ActionPerformed(evt);
            }
        });
        greenTeamUserIdTextField7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamUserIdTextField7KeyReleased(evt);
            }
        });

        greenTeamCodeNameTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamCodeNameTextField7ActionPerformed(evt);
            }
        });
        greenTeamCodeNameTextField7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamCodeNameTextField7KeyReleased(evt);
            }
        });

        greenTeamRow8Label.setText("8");

        greenTeamUserIdTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamUserIdTextField8ActionPerformed(evt);
            }
        });
        greenTeamUserIdTextField8.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamUserIdTextField8KeyReleased(evt);
            }
        });

        greenTeamCodeNameTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamCodeNameTextField8ActionPerformed(evt);
            }
        });
        greenTeamCodeNameTextField8.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamCodeNameTextField8KeyReleased(evt);
            }
        });

        greenTeamRow9Label.setText("9");

        greenTeamUserIdTextField9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamUserIdTextField9ActionPerformed(evt);
            }
        });
        greenTeamUserIdTextField9.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamUserIdTextField9KeyReleased(evt);
            }
        });

        greenTeamCodeNameTextField9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamCodeNameTextField9ActionPerformed(evt);
            }
        });
        greenTeamCodeNameTextField9.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamCodeNameTextField9KeyReleased(evt);
            }
        });

        greenTeamRow10Label.setText("10");

        greenTeamUserIdTextField10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamUserIdTextField10ActionPerformed(evt);
            }
        });
        greenTeamUserIdTextField10.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamUserIdTextField10KeyReleased(evt);
            }
        });

        greenTeamCodeNameTextField10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamCodeNameTextField10ActionPerformed(evt);
            }
        });
        greenTeamCodeNameTextField10.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamCodeNameTextField10KeyReleased(evt);
            }
        });

        greenTeamRow11Label.setText("11");

        greenTeamUserIdTextField11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamUserIdTextField11ActionPerformed(evt);
            }
        });
        greenTeamUserIdTextField11.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamUserIdTextField11KeyReleased(evt);
            }
        });

        greenTeamCodeNameTextField11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamCodeNameTextField11ActionPerformed(evt);
            }
        });
        greenTeamCodeNameTextField11.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamCodeNameTextField11KeyReleased(evt);
            }
        });

        greenTeamCheckBox12.setText("jCheckBox1");

        greenTeamRow12Label.setText("12");

        greenTeamUserIdTextField12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamUserIdTextField12ActionPerformed(evt);
            }
        });
        greenTeamUserIdTextField12.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamUserIdTextField12KeyReleased(evt);
            }
        });

        greenTeamCodeNameTextField12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamCodeNameTextField12ActionPerformed(evt);
            }
        });
        greenTeamCodeNameTextField12.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamCodeNameTextField12KeyReleased(evt);
            }
        });

        greenTeamCheckBox13.setText("jCheckBox1");

        greenTeamRow13Label.setText("13");

        greenTeamUserIdTextField13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamUserIdTextField13ActionPerformed(evt);
            }
        });
        greenTeamUserIdTextField13.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamUserIdTextField13KeyReleased(evt);
            }
        });

        greenTeamCodeNameTextField13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamCodeNameTextField13ActionPerformed(evt);
            }
        });
        greenTeamCodeNameTextField13.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamCodeNameTextField13KeyReleased(evt);
            }
        });

        greenTeamCheckBox14.setText("jCheckBox1");
        greenTeamCheckBox14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamCheckBox14ActionPerformed(evt);
            }
        });

        greenTeamRow14Label.setText("14");

        greenTeamUserIdTextField14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamUserIdTextField14ActionPerformed(evt);
            }
        });
        greenTeamUserIdTextField14.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamUserIdTextField14KeyReleased(evt);
            }
        });

        greenTeamCodeNameTextField14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamCodeNameTextField14ActionPerformed(evt);
            }
        });
        greenTeamCodeNameTextField14.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamCodeNameTextField14KeyReleased(evt);
            }
        });

        greenTeamCheckBox15.setText("jCheckBox1");

        greenTeamRow15Label.setText("15");

        greenTeamUserIdTextField15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamUserIdTextField15ActionPerformed(evt);
            }
        });
        greenTeamUserIdTextField15.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamUserIdTextField15KeyReleased(evt);
            }
        });

        greenTeamCodeNameTextField15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenTeamCodeNameTextField15ActionPerformed(evt);
            }
        });
        greenTeamCodeNameTextField15.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTeamCodeNameTextField15KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout greenTeamPanelLayout = new javax.swing.GroupLayout(greenTeamPanel);
        greenTeamPanel.setLayout(greenTeamPanelLayout);
        greenTeamPanelLayout.setHorizontalGroup(
            greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(greenTeamPanelLayout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, greenTeamPanelLayout.createSequentialGroup()
                        .addComponent(greenTeamCheckBox0, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamRow0Label)
                        .addGap(18, 18, 18)
                        .addComponent(greenTeamUserIdTextField0, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamCodeNameTextField0, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, greenTeamPanelLayout.createSequentialGroup()
                        .addComponent(greenTeamCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamRow1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(greenTeamUserIdTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamCodeNameTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, greenTeamPanelLayout.createSequentialGroup()
                        .addComponent(greenTeamCheckBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamRow2Label)
                        .addGap(18, 18, 18)
                        .addComponent(greenTeamUserIdTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamCodeNameTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, greenTeamPanelLayout.createSequentialGroup()
                        .addComponent(greenTeamCheckBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamRow3Label)
                        .addGap(18, 18, 18)
                        .addComponent(greenTeamUserIdTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamCodeNameTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, greenTeamPanelLayout.createSequentialGroup()
                        .addComponent(greenTeamCheckBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamRow4Label)
                        .addGap(18, 18, 18)
                        .addComponent(greenTeamUserIdTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamCodeNameTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, greenTeamPanelLayout.createSequentialGroup()
                        .addComponent(greenTeamCheckBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamRow5Label)
                        .addGap(18, 18, 18)
                        .addComponent(greenTeamUserIdTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamCodeNameTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, greenTeamPanelLayout.createSequentialGroup()
                        .addComponent(greenTeamCheckBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamRow6Label)
                        .addGap(18, 18, 18)
                        .addComponent(greenTeamUserIdTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamCodeNameTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, greenTeamPanelLayout.createSequentialGroup()
                        .addComponent(greenTeamCheckBox7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamRow7Label, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(greenTeamUserIdTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamCodeNameTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, greenTeamPanelLayout.createSequentialGroup()
                        .addComponent(greenTeamCheckBox8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamRow8Label)
                        .addGap(18, 18, 18)
                        .addComponent(greenTeamUserIdTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamCodeNameTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, greenTeamPanelLayout.createSequentialGroup()
                        .addComponent(greenTeamCheckBox9, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamRow9Label)
                        .addGap(18, 18, 18)
                        .addComponent(greenTeamUserIdTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamCodeNameTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, greenTeamPanelLayout.createSequentialGroup()
                        .addComponent(greenTeamCheckBox10, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(greenTeamRow10Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(greenTeamUserIdTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamCodeNameTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, greenTeamPanelLayout.createSequentialGroup()
                        .addComponent(greenTeamCheckBox11, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(greenTeamRow11Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(greenTeamUserIdTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamCodeNameTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, greenTeamPanelLayout.createSequentialGroup()
                        .addComponent(greenTeamCheckBox12, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(greenTeamRow12Label, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamUserIdTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamCodeNameTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, greenTeamPanelLayout.createSequentialGroup()
                        .addComponent(greenTeamCheckBox13, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(greenTeamRow13Label, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamUserIdTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenTeamCodeNameTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(greenTeamPanelLayout.createSequentialGroup()
                        .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(greenTeamCheckBox15, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(greenTeamCheckBox14, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(greenTeamRow14Label, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                            .addComponent(greenTeamRow15Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, greenTeamPanelLayout.createSequentialGroup()
                                .addComponent(greenTeamUserIdTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(greenTeamCodeNameTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, greenTeamPanelLayout.createSequentialGroup()
                                .addComponent(greenTeamUserIdTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(greenTeamCodeNameTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
            .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(greenTeamPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(greenTeamLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        greenTeamPanelLayout.setVerticalGroup(
            greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(greenTeamPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(greenTeamCodeNameTextField0)
                    .addComponent(greenTeamUserIdTextField0)
                    .addComponent(greenTeamRow0Label)
                    .addComponent(greenTeamCheckBox0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(greenTeamCodeNameTextField1)
                    .addComponent(greenTeamUserIdTextField1)
                    .addComponent(greenTeamRow1Label)
                    .addComponent(greenTeamCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(greenTeamCodeNameTextField2)
                    .addComponent(greenTeamUserIdTextField2)
                    .addComponent(greenTeamRow2Label)
                    .addComponent(greenTeamCheckBox2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(greenTeamCodeNameTextField3)
                    .addComponent(greenTeamUserIdTextField3)
                    .addComponent(greenTeamRow3Label)
                    .addComponent(greenTeamCheckBox3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(greenTeamCodeNameTextField4)
                    .addComponent(greenTeamUserIdTextField4)
                    .addComponent(greenTeamRow4Label)
                    .addComponent(greenTeamCheckBox4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(greenTeamCodeNameTextField5)
                    .addComponent(greenTeamUserIdTextField5)
                    .addComponent(greenTeamRow5Label)
                    .addComponent(greenTeamCheckBox5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(greenTeamCodeNameTextField6)
                    .addComponent(greenTeamUserIdTextField6)
                    .addComponent(greenTeamRow6Label)
                    .addComponent(greenTeamCheckBox6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(greenTeamCodeNameTextField7)
                    .addComponent(greenTeamUserIdTextField7)
                    .addComponent(greenTeamRow7Label)
                    .addComponent(greenTeamCheckBox7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(greenTeamCodeNameTextField8)
                    .addComponent(greenTeamUserIdTextField8)
                    .addComponent(greenTeamRow8Label)
                    .addComponent(greenTeamCheckBox8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(greenTeamCodeNameTextField9)
                    .addComponent(greenTeamUserIdTextField9)
                    .addComponent(greenTeamRow9Label)
                    .addComponent(greenTeamCheckBox9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(greenTeamCodeNameTextField10)
                    .addComponent(greenTeamUserIdTextField10)
                    .addComponent(greenTeamRow10Label)
                    .addComponent(greenTeamCheckBox10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(greenTeamCodeNameTextField11)
                    .addComponent(greenTeamUserIdTextField11)
                    .addComponent(greenTeamRow11Label)
                    .addComponent(greenTeamCheckBox11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(greenTeamCodeNameTextField12)
                    .addComponent(greenTeamUserIdTextField12)
                    .addComponent(greenTeamRow12Label)
                    .addComponent(greenTeamCheckBox12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(greenTeamCodeNameTextField13)
                    .addComponent(greenTeamUserIdTextField13)
                    .addComponent(greenTeamRow13Label)
                    .addComponent(greenTeamCheckBox13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(greenTeamCodeNameTextField14)
                    .addComponent(greenTeamUserIdTextField14)
                    .addComponent(greenTeamRow14Label)
                    .addComponent(greenTeamCheckBox14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(3, 3, 3)
                .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(greenTeamCodeNameTextField15)
                    .addComponent(greenTeamUserIdTextField15)
                    .addComponent(greenTeamRow15Label)
                    .addComponent(greenTeamCheckBox15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(greenTeamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(greenTeamPanelLayout.createSequentialGroup()
                    .addComponent(greenTeamLabel)
                    .addGap(0, 476, Short.MAX_VALUE)))
        );

        backgroundPanel.setBackground(new java.awt.Color(0, 0, 0));

        startButton.setBackground(new java.awt.Color(0, 255, 0));
        startButton.setText("START");
        startButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        startButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                startButtonItemStateChanged(evt);
            }
        });
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        titleLabel.setBackground(new java.awt.Color(0, 0, 0));
        titleLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(153, 0, 153));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("EDIT CURRENT GAME");

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap(228, Short.MAX_VALUE)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(223, 223, 223))))
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 523, Short.MAX_VALUE)
                .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(redTeamPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(392, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(386, 386, 386)
                    .addComponent(greenTeamPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(55, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(redTeamPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(42, 42, 42)
                    .addComponent(greenTeamPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(75, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(backgroundPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//-----------------------------------------------------------------------------------------------------------------------------------
    private void redTeamUserIdTextField7ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                redTeamCodeNameTextField7.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                
            }
            else
            {//do nothing
            }
        }
    }

    private void redTeamCodeNameTextField5ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = redTeamUserIdTextField5.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void redTeamUserIdTextField5ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                redTeamCodeNameTextField5.setText(dbCodeName); //so this string will be replaced with what the querry returns
                                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                 
            }
            else
            {//do nothing
            }
        }
    }

    private void redTeamCodeNameTextField3ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = redTeamUserIdTextField3.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void redTeamUserIdTextField3ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                redTeamCodeNameTextField3.setText(dbCodeName); //so this string will be replaced with what the querry returns
                                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                              
            }
            else
            {//do nothing
            }
        }
    }

    private void redTeamCodeNameTextField2ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = redTeamUserIdTextField2.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void redTeamUserIdTextField0ActionPerformed(java.awt.event.ActionEvent evt) 
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                redTeamCodeNameTextField0.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList

            }
            else
            {//do nothing
            }
        }
    }

    private void redTeamCheckBox0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redTeamCheckBox0ActionPerformed
        //
    }

    private void redTeamCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redTeamCheckBox1ActionPerformed
        // 
    }

    private void greenTeamCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenTeamCheckBox1ActionPerformed
        //
    }

    private void redTeamCheckBox12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redTeamCheckBox12ActionPerformed
        // 
    }

    private void greenTeamCheckBox0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenTeamCheckBox0ActionPerformed
    }

    private void greenTeamCheckBox14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenTeamCheckBox14ActionPerformed
        //
    }

    private void redTeamUserIdTextField0KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamUserIdTextField0KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamUserIdTextField0KeyReleased

    private void redTeamCodeNameTextField0ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = redTeamUserIdTextField0.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);

                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList 
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void redTeamCodeNameTextField0KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamCodeNameTextField0KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamCodeNameTextField0KeyReleased

    private void startButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_startButtonItemStateChanged
    System.exit(ABORT);    
    }//GEN-LAST:event_startButtonItemStateChanged

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        db.closeDatabase();
        this.setVisible(false);
        isVisibil = false;  
    }//GEN-LAST:event_startButtonActionPerformed

    private void redTeamUserIdTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamUserIdTextField1KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamUserIdTextField1KeyReleased

    private void redTeamUserIdTextField1ActionPerformed(java.awt.event.ActionEvent evt) 
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                redTeamCodeNameTextField1.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                               
            }
            else
            {//do nothing
            }
        }
    }//GEN-LAST:event_redTeamUserIdTextField1ActionPerformed

    private void redTeamCodeNameTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamCodeNameTextField1KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamCodeNameTextField1KeyReleased

    private void redTeamCodeNameTextField1ActionPerformed(java.awt.event.ActionEvent evt) 
    {
       //this will be the code for what happens when we hit enter on a CodeNameTextField
        //we essentially want to let the user add a name to the DB if it doens't already exist
        //so if the user is clicking enter on this text field they want to add a new user to the DB
        //So we need to pull the strings from the textFields and send them to the DB to create a new record
        String idNum = redTeamUserIdTextField1.getText();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idNum);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }
        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in the used ID box to an integer.");
        }
        else
        {
            String codeName = db.inTable(idNumParsed);
            if(codeName == null)
            {
                codeName = evt.getActionCommand();
                System.out.println("These are the values that will be passed to the DB to add a new record.");
                System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                db.createRecord(idNumParsed, "blank", "blank", codeName);
                                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList
            }
            else
            {
                System.out.println("That userId already exist please enter a different integer.");
            }
        }
    }

    private void redTeamUserIdTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamUserIdTextField2KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamUserIdTextField2KeyReleased

    private void redTeamUserIdTextField3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamUserIdTextField3KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamUserIdTextField3KeyReleased

    private void redTeamUserIdTextField4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamUserIdTextField4KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamUserIdTextField4KeyReleased

    private void redTeamUserIdTextField5KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamUserIdTextField5KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamUserIdTextField5KeyReleased

    private void redTeamUserIdTextField6KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamUserIdTextField6KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamUserIdTextField6KeyReleased

    private void redTeamUserIdTextField7KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamUserIdTextField7KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamUserIdTextField7KeyReleased

    private void redTeamUserIdTextField8KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamUserIdTextField8KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamUserIdTextField8KeyReleased

    private void redTeamUserIdTextField9KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamUserIdTextField9KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamUserIdTextField9KeyReleased

    private void redTeamUserIdTextField10KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamUserIdTextField10KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamUserIdTextField10KeyReleased

    private void redTeamUserIdTextField11KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamUserIdTextField11KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamUserIdTextField11KeyReleased

    private void redTeamUserIdTextField12KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamUserIdTextField12KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamUserIdTextField12KeyReleased

    private void redTeamUserIdTextField13KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamUserIdTextField13KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamUserIdTextField13KeyReleased

    private void redTeamUserIdTextField14KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamUserIdTextField14KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamUserIdTextField14KeyReleased

    private void redTeamUserIdTextField15KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamUserIdTextField15KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamUserIdTextField15KeyReleased

    private void redTeamCodeNameTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamCodeNameTextField2KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamCodeNameTextField2KeyReleased

    private void redTeamCodeNameTextField3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamCodeNameTextField3KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamCodeNameTextField3KeyReleased

    private void redTeamCodeNameTextField4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamCodeNameTextField4KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamCodeNameTextField4KeyReleased

    private void redTeamCodeNameTextField5KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamCodeNameTextField5KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamCodeNameTextField5KeyReleased

    private void redTeamCodeNameTextField6KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamCodeNameTextField6KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamCodeNameTextField6KeyReleased

    private void redTeamCodeNameTextField7KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamCodeNameTextField7KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamCodeNameTextField7KeyReleased

    private void redTeamCodeNameTextField8KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamCodeNameTextField8KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamCodeNameTextField8KeyReleased

    private void redTeamCodeNameTextField9KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamCodeNameTextField9KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamCodeNameTextField9KeyReleased

    private void redTeamCodeNameTextField10KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamCodeNameTextField10KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamCodeNameTextField10KeyReleased

    private void redTeamCodeNameTextField11KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamCodeNameTextField11KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamCodeNameTextField11KeyReleased

    private void redTeamCodeNameTextField12KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamCodeNameTextField12KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamCodeNameTextField12KeyReleased

    private void redTeamCodeNameTextField13KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamCodeNameTextField13KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamCodeNameTextField13KeyReleased

    private void redTeamCodeNameTextField14KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamCodeNameTextField14KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_redTeamCodeNameTextField14KeyReleased

    private void redTeamCodeNameTextField15KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTeamCodeNameTextField15KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }

    private void redTeamUserIdTextField2ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                redTeamCodeNameTextField2.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                  
            }
            else
            {//do nothing
            }
        }
    }

    private void redTeamUserIdTextField4ActionPerformed(java.awt.event.ActionEvent evt) 
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                redTeamCodeNameTextField4.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                               
            }
            else
            {//do nothing
            }
        }
    }

    private void redTeamUserIdTextField6ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                redTeamCodeNameTextField6.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                          
            }
            else
            {//do nothing
            }
        }
    }

    private void redTeamUserIdTextField8ActionPerformed(java.awt.event.ActionEvent evt) 
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                redTeamCodeNameTextField8.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                 
            }
            else
            {//do nothing
            }
        }
    }

    private void redTeamUserIdTextField9ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                redTeamCodeNameTextField9.setText(dbCodeName); //so this string will be replaced with what the querry returns
                                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                 
            }
            else
            {//do nothing
            }
        }
    }

    private void redTeamUserIdTextField10ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                redTeamCodeNameTextField10.setText(dbCodeName); //so this string will be replaced with what the querry returns
                                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                 
            }
            else
            {//do nothing
            }
        }
    }

    private void redTeamUserIdTextField11ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                redTeamCodeNameTextField11.setText(dbCodeName); //so this string will be replaced with what the querry returns
                                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                 
            }
            else
            {//do nothing
            }
        }
    }

    private void redTeamUserIdTextField12ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                redTeamCodeNameTextField12.setText(dbCodeName); //so this string will be replaced with what the querry returns
                                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                
            }
            else
            {//do nothing
            }
        }
    }

    private void redTeamUserIdTextField13ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                redTeamCodeNameTextField13.setText(dbCodeName); //so this string will be replaced with what the querry returns
                                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                
            }
            else
            {//do nothing
            }
        }
    }

    private void redTeamUserIdTextField14ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                redTeamCodeNameTextField14.setText(dbCodeName); //so this string will be replaced with what the querry returns
                                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                
            }
            else
            {//do nothing
            }
        }
    }

    private void redTeamUserIdTextField15ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                redTeamCodeNameTextField15.setText(dbCodeName); //so this string will be replaced with what the querry returns
                                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                
            }
            else
            {//do nothing
            }
        }
    }

    private void redTeamCodeNameTextField4ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = redTeamUserIdTextField4.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList 
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void redTeamCodeNameTextField6ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = redTeamUserIdTextField6.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void redTeamCodeNameTextField7ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = redTeamUserIdTextField7.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void redTeamCodeNameTextField8ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = redTeamUserIdTextField8.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList 
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void redTeamCodeNameTextField9ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = redTeamUserIdTextField9.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList 
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void redTeamCodeNameTextField10ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = redTeamUserIdTextField10.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList 
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void redTeamCodeNameTextField11ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = redTeamUserIdTextField11.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList 
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void redTeamCodeNameTextField12ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = redTeamUserIdTextField12.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void redTeamCodeNameTextField13ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = redTeamUserIdTextField13.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList 
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void redTeamCodeNameTextField14ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = redTeamUserIdTextField14.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList 
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void redTeamCodeNameTextField15ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = redTeamUserIdTextField15.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }
                
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    redTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList 
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void greenTeamUserIdTextField0KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamUserIdTextField0KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamUserIdTextField0KeyReleased

    private void greenTeamUserIdTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamUserIdTextField1KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamUserIdTextField1KeyReleased

    private void greenTeamUserIdTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamUserIdTextField2KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamUserIdTextField2KeyReleased

    private void greenTeamUserIdTextField3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamUserIdTextField3KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamUserIdTextField3KeyReleased

    private void greenTeamUserIdTextField4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamUserIdTextField4KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamUserIdTextField4KeyReleased

    private void greenTeamUserIdTextField5KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamUserIdTextField5KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamUserIdTextField5KeyReleased

    private void greenTeamUserIdTextField6KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamUserIdTextField6KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamUserIdTextField6KeyReleased

    private void greenTeamUserIdTextField7KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamUserIdTextField7KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamUserIdTextField7KeyReleased

    private void greenTeamUserIdTextField8KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamUserIdTextField8KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamUserIdTextField8KeyReleased

    private void greenTeamUserIdTextField9KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamUserIdTextField9KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamUserIdTextField9KeyReleased

    private void greenTeamUserIdTextField10KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamUserIdTextField10KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamUserIdTextField10KeyReleased

    private void greenTeamUserIdTextField11KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamUserIdTextField11KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamUserIdTextField11KeyReleased

    private void greenTeamUserIdTextField12KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamUserIdTextField12KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamUserIdTextField12KeyReleased

    private void greenTeamUserIdTextField13KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamUserIdTextField13KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamUserIdTextField13KeyReleased

    private void greenTeamUserIdTextField14KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamUserIdTextField14KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamUserIdTextField14KeyReleased

    private void greenTeamUserIdTextField15KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamUserIdTextField15KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamUserIdTextField15KeyReleased

    private void greenTeamCodeNameTextField0KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamCodeNameTextField0KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamCodeNameTextField0KeyReleased

    private void greenTeamCodeNameTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamCodeNameTextField1KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamCodeNameTextField1KeyReleased

    private void greenTeamCodeNameTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamCodeNameTextField2KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamCodeNameTextField2KeyReleased

    private void greenTeamCodeNameTextField3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamCodeNameTextField3KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamCodeNameTextField3KeyReleased

    private void greenTeamCodeNameTextField4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamCodeNameTextField4KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamCodeNameTextField4KeyReleased

    private void greenTeamCodeNameTextField5KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamCodeNameTextField5KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamCodeNameTextField5KeyReleased

    private void greenTeamCodeNameTextField6KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamCodeNameTextField6KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamCodeNameTextField6KeyReleased

    private void greenTeamCodeNameTextField7KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamCodeNameTextField7KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamCodeNameTextField7KeyReleased

    private void greenTeamCodeNameTextField8KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamCodeNameTextField8KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamCodeNameTextField8KeyReleased

    private void greenTeamCodeNameTextField9KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamCodeNameTextField9KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamCodeNameTextField9KeyReleased

    private void greenTeamCodeNameTextField10KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamCodeNameTextField10KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamCodeNameTextField10KeyReleased

    private void greenTeamCodeNameTextField11KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamCodeNameTextField11KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamCodeNameTextField11KeyReleased

    private void greenTeamCodeNameTextField12KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamCodeNameTextField12KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamCodeNameTextField12KeyReleased

    private void greenTeamCodeNameTextField13KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamCodeNameTextField13KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamCodeNameTextField13KeyReleased

    private void greenTeamCodeNameTextField14KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamCodeNameTextField14KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamCodeNameTextField14KeyReleased

    private void greenTeamCodeNameTextField15KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTeamCodeNameTextField15KeyReleased
         if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_F3)
         {
            db.closeDatabase();
            this.setVisible(false);
            isVisibil = false;  
         }
    }//GEN-LAST:event_greenTeamCodeNameTextField15KeyReleased

    private void greenTeamUserIdTextField0ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                greenTeamCodeNameTextField0.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    greenTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                  
            }
            else
            {//do nothing
            }
        }
    }

    private void greenTeamUserIdTextField1ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                greenTeamCodeNameTextField1.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    greenTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                 
            }
            else
            {//do nothing
            }
        }
    }

    private void greenTeamUserIdTextField2ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                greenTeamCodeNameTextField2.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    greenTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                 
            }
            else
            {//do nothing
            }
        }
    }

    private void greenTeamUserIdTextField3ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                greenTeamCodeNameTextField3.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    greenTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                 
            }
            else
            {//do nothing
            }
        }
    }

    private void greenTeamUserIdTextField4ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                greenTeamCodeNameTextField4.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    greenTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                               
            }
            else
            {//do nothing
            }
        }
    }

    private void greenTeamUserIdTextField5ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                greenTeamCodeNameTextField5.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    greenTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                 
            }
            else
            {//do nothing
            }
        }
    }

    private void greenTeamUserIdTextField6ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                greenTeamCodeNameTextField6.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    greenTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                 
            }
            else
            {//do nothing
            }
        }
    }

    private void greenTeamUserIdTextField7ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                greenTeamCodeNameTextField7.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    greenTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                 
            }
            else
            {//do nothing
            }
        }
    }

    private void greenTeamUserIdTextField8ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                greenTeamCodeNameTextField8.setText(dbCodeName); //so this string will be replaced with what the querry returns 
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    greenTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                
            }
            else
            {//do nothing
            }
        }
    }

    private void greenTeamUserIdTextField9ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                greenTeamCodeNameTextField9.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    greenTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                 
            }
            else
            {//do nothing
            }
        }
    }

    private void greenTeamUserIdTextField10ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                greenTeamCodeNameTextField10.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    greenTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                 
            }
            else
            {//do nothing
            }
        }
    }

    private void greenTeamUserIdTextField11ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                greenTeamCodeNameTextField11.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    greenTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                
            }
            else
            {//do nothing
            }
        }
    }

    private void greenTeamUserIdTextField12ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                greenTeamCodeNameTextField12.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    greenTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                
            }
            else
            {//do nothing
            }
        }
    }

    private void greenTeamUserIdTextField13ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                greenTeamCodeNameTextField13.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    greenTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                
            }
            else
            {//do nothing
            }
        }
    }

    private void greenTeamUserIdTextField14ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                greenTeamCodeNameTextField14.setText(dbCodeName); //so this string will be replaced with what the querry returns 
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    greenTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                
            }
            else
            {//do nothing
            }
        }
    }

    private void greenTeamUserIdTextField15ActionPerformed(java.awt.event.ActionEvent evt)
    {
        String idFromEvt = evt.getActionCommand();
        int idNumParsed = -1;
        try
        {
            idNumParsed = Integer.parseInt(idFromEvt);
        }
        catch(NumberFormatException e)
        {
            System.out.println("Value in the user Id box is not an integer");
        }

        if(idNumParsed == -1)
        {
            System.out.println("Please change the value in Id field to an integer.");
        }
        else
        {
            System.out.println("Sending the DB the id number: " + idNumParsed);
            //so the string stored in the text bock is submitted as "evt"
            //so I'll then run a querry on the database, if the corresponding 

            String dbCodeName = db.inTable(idNumParsed);
            // if the codeName is found we'll write that data to the next textField
            if(dbCodeName != null)//if the DB.querry(idFromEvt); doesnt return a value the string will be null and we wont do anything yet
            {
                //we now need to write what the querry returned to the next redTeamCodeNameTextField0
                greenTeamCodeNameTextField15.setText(dbCodeName); //so this string will be replaced with what the querry returns
                //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1;
                    else
                    {}
                }

                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    greenTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList                                                 
            }
            else
            {//do nothing
            }
        }
    }

    private void greenTeamCodeNameTextField0ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = greenTeamUserIdTextField0.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                int controlVal = 0;
                for(int i = 0; i < greenTeamNameList.size(); i++)
                {
                    if(greenTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                for(int i = 0; i < redTeamNameList.size(); i++)
                {
                    if(redTeamNameList.get(i) == idNumParsed)
                        controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                    else
                    {} //do nothing and keep the controlVal at 0
                }

                if(controlVal == 0)
                {
                    greenTeamNameList.add(idNumParsed);
                }
                //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void greenTeamCodeNameTextField1ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = greenTeamUserIdTextField1.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                 int controlVal = 0;
                 for(int i = 0; i < greenTeamNameList.size(); i++)
                 {
                     if(greenTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 for(int i = 0; i < redTeamNameList.size(); i++)
                 {
                     if(redTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 if(controlVal == 0)
                 {
                     greenTeamNameList.add(idNumParsed);
                 }
                 //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void greenTeamCodeNameTextField2ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = greenTeamUserIdTextField2.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                 int controlVal = 0;
                 for(int i = 0; i < greenTeamNameList.size(); i++)
                 {
                     if(greenTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 for(int i = 0; i < redTeamNameList.size(); i++)
                 {
                     if(redTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 if(controlVal == 0)
                 {
                     greenTeamNameList.add(idNumParsed);
                 }
                 //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void greenTeamCodeNameTextField3ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = greenTeamUserIdTextField3.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                 int controlVal = 0;
                 for(int i = 0; i < greenTeamNameList.size(); i++)
                 {
                     if(greenTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 for(int i = 0; i < redTeamNameList.size(); i++)
                 {
                     if(redTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 if(controlVal == 0)
                 {
                     greenTeamNameList.add(idNumParsed);
                 }
                 //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void greenTeamCodeNameTextField4ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = greenTeamUserIdTextField4.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                 int controlVal = 0;
                 for(int i = 0; i < greenTeamNameList.size(); i++)
                 {
                     if(greenTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 for(int i = 0; i < redTeamNameList.size(); i++)
                 {
                     if(redTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 if(controlVal == 0)
                 {
                     greenTeamNameList.add(idNumParsed);
                 }
                 //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void greenTeamCodeNameTextField5ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = greenTeamUserIdTextField5.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                 int controlVal = 0;
                 for(int i = 0; i < greenTeamNameList.size(); i++)
                 {
                     if(greenTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 for(int i = 0; i < redTeamNameList.size(); i++)
                 {
                     if(redTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 if(controlVal == 0)
                 {
                     greenTeamNameList.add(idNumParsed);
                 }
                 //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void greenTeamCodeNameTextField6ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = greenTeamUserIdTextField6.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                 int controlVal = 0;
                 for(int i = 0; i < greenTeamNameList.size(); i++)
                 {
                     if(greenTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 for(int i = 0; i < redTeamNameList.size(); i++)
                 {
                     if(redTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 if(controlVal == 0)
                 {
                     greenTeamNameList.add(idNumParsed);
                 }
                 //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void greenTeamCodeNameTextField7ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = greenTeamUserIdTextField7.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                 int controlVal = 0;
                 for(int i = 0; i < greenTeamNameList.size(); i++)
                 {
                     if(greenTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 for(int i = 0; i < redTeamNameList.size(); i++)
                 {
                     if(redTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 if(controlVal == 0)
                 {
                     greenTeamNameList.add(idNumParsed);
                 }
                 //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void greenTeamCodeNameTextField8ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = greenTeamUserIdTextField8.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                 int controlVal = 0;
                 for(int i = 0; i < greenTeamNameList.size(); i++)
                 {
                     if(greenTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 for(int i = 0; i < redTeamNameList.size(); i++)
                 {
                     if(redTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 if(controlVal == 0)
                 {
                     greenTeamNameList.add(idNumParsed);
                 }
                 //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void greenTeamCodeNameTextField9ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = greenTeamUserIdTextField9.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                 int controlVal = 0;
                 for(int i = 0; i < greenTeamNameList.size(); i++)
                 {
                     if(greenTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 for(int i = 0; i < redTeamNameList.size(); i++)
                 {
                     if(redTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 if(controlVal == 0)
                 {
                     greenTeamNameList.add(idNumParsed);
                 }
                 //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void greenTeamCodeNameTextField10ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = greenTeamUserIdTextField10.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                 int controlVal = 0;
                 for(int i = 0; i < greenTeamNameList.size(); i++)
                 {
                     if(greenTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 for(int i = 0; i < redTeamNameList.size(); i++)
                 {
                     if(redTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 if(controlVal == 0)
                 {
                     greenTeamNameList.add(idNumParsed);
                 }
                 //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void greenTeamCodeNameTextField11ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = greenTeamUserIdTextField11.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                 int controlVal = 0;
                 for(int i = 0; i < greenTeamNameList.size(); i++)
                 {
                     if(greenTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 for(int i = 0; i < redTeamNameList.size(); i++)
                 {
                     if(redTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 if(controlVal == 0)
                 {
                     greenTeamNameList.add(idNumParsed);
                 }
                 //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void greenTeamCodeNameTextField12ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = greenTeamUserIdTextField12.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                 int controlVal = 0;
                 for(int i = 0; i < greenTeamNameList.size(); i++)
                 {
                     if(greenTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 for(int i = 0; i < redTeamNameList.size(); i++)
                 {
                     if(redTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 if(controlVal == 0)
                 {
                     greenTeamNameList.add(idNumParsed);
                 }
                 //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void greenTeamCodeNameTextField13ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = greenTeamUserIdTextField13.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                 int controlVal = 0;
                 for(int i = 0; i < greenTeamNameList.size(); i++)
                 {
                     if(greenTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 for(int i = 0; i < redTeamNameList.size(); i++)
                 {
                     if(redTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 if(controlVal == 0)
                 {
                     greenTeamNameList.add(idNumParsed);
                 }
                 //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void greenTeamCodeNameTextField14ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = greenTeamUserIdTextField14.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                 int controlVal = 0;
                 for(int i = 0; i < greenTeamNameList.size(); i++)
                 {
                     if(greenTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 for(int i = 0; i < redTeamNameList.size(); i++)
                 {
                     if(redTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 if(controlVal == 0)
                 {
                     greenTeamNameList.add(idNumParsed);
                 }
                 //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    private void greenTeamCodeNameTextField15ActionPerformed(java.awt.event.ActionEvent evt)
    {
        //this will be the code for what happens when we hit enter on a CodeNameTextField
         //we essentially want to let the user add a name to the DB if it doens't already exist
         //so if the user is clicking enter on this text field they want to add a new user to the DB
         //So we need to pull the strings from the textFields and send them to the DB to create a new record
         String idNum = greenTeamUserIdTextField15.getText();
         int idNumParsed = -1;
         try
         {
             idNumParsed = Integer.parseInt(idNum);
         }
         catch(NumberFormatException e)
         {
             System.out.println("Value in the user Id box is not an integer");
         }
         if(idNumParsed == -1)
         {
             System.out.println("Please change the value in the used ID box to an integer.");
         }
         else
         {
             String codeName = db.inTable(idNumParsed);
             if(codeName == null)
             {
                 codeName = evt.getActionCommand();
                 System.out.println("These are the values that will be passed to the DB to add a new record.");
                 System.out.println("IdNumber: " + idNum + " CodeName: " + codeName);
                 db.createRecord(idNumParsed, "blank", "blank", codeName);
                 //now we need to add this name to the arrayList for red team but need to make sure there are no duplicates
                 int controlVal = 0;
                 for(int i = 0; i < greenTeamNameList.size(); i++)
                 {
                     if(greenTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 for(int i = 0; i < redTeamNameList.size(); i++)
                 {
                     if(redTeamNameList.get(i) == idNumParsed)
                         controlVal = 1; //this means that the name already exist in the name list and we shouldnt add it
                     else
                     {} //do nothing and keep the controlVal at 0
                 }
 
                 if(controlVal == 0)
                 {
                     greenTeamNameList.add(idNumParsed);
                 }
                 //if not we dont add the name to the arrayList
             }
             else
             {
                 System.out.println("That userId already exist please enter a different integer.");
             }
         }
     }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EntryTerminal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EntryTerminal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EntryTerminal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EntryTerminal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new EntryTerminal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JCheckBox greenTeamCheckBox0;
    private javax.swing.JCheckBox greenTeamCheckBox1;
    private javax.swing.JCheckBox greenTeamCheckBox10;
    private javax.swing.JCheckBox greenTeamCheckBox11;
    private javax.swing.JCheckBox greenTeamCheckBox12;
    private javax.swing.JCheckBox greenTeamCheckBox13;
    private javax.swing.JCheckBox greenTeamCheckBox14;
    private javax.swing.JCheckBox greenTeamCheckBox15;
    private javax.swing.JCheckBox greenTeamCheckBox2;
    private javax.swing.JCheckBox greenTeamCheckBox3;
    private javax.swing.JCheckBox greenTeamCheckBox4;
    private javax.swing.JCheckBox greenTeamCheckBox5;
    private javax.swing.JCheckBox greenTeamCheckBox6;
    private javax.swing.JCheckBox greenTeamCheckBox7;
    private javax.swing.JCheckBox greenTeamCheckBox8;
    private javax.swing.JCheckBox greenTeamCheckBox9;
    private javax.swing.JFormattedTextField greenTeamCodeNameTextField0;
    private javax.swing.JFormattedTextField greenTeamCodeNameTextField1;
    private javax.swing.JFormattedTextField greenTeamCodeNameTextField10;
    private javax.swing.JFormattedTextField greenTeamCodeNameTextField11;
    private javax.swing.JFormattedTextField greenTeamCodeNameTextField12;
    private javax.swing.JFormattedTextField greenTeamCodeNameTextField13;
    private javax.swing.JFormattedTextField greenTeamCodeNameTextField14;
    private javax.swing.JFormattedTextField greenTeamCodeNameTextField15;
    private javax.swing.JFormattedTextField greenTeamCodeNameTextField2;
    private javax.swing.JFormattedTextField greenTeamCodeNameTextField3;
    private javax.swing.JFormattedTextField greenTeamCodeNameTextField4;
    private javax.swing.JFormattedTextField greenTeamCodeNameTextField5;
    private javax.swing.JFormattedTextField greenTeamCodeNameTextField6;
    private javax.swing.JFormattedTextField greenTeamCodeNameTextField7;
    private javax.swing.JFormattedTextField greenTeamCodeNameTextField8;
    private javax.swing.JFormattedTextField greenTeamCodeNameTextField9;
    private javax.swing.JLabel greenTeamLabel;
    private javax.swing.JPanel greenTeamPanel;
    private javax.swing.JLabel greenTeamRow0Label;
    private javax.swing.JLabel greenTeamRow10Label;
    private javax.swing.JLabel greenTeamRow11Label;
    private javax.swing.JLabel greenTeamRow12Label;
    private javax.swing.JLabel greenTeamRow13Label;
    private javax.swing.JLabel greenTeamRow14Label;
    private javax.swing.JLabel greenTeamRow15Label;
    private javax.swing.JLabel greenTeamRow1Label;
    private javax.swing.JLabel greenTeamRow2Label;
    private javax.swing.JLabel greenTeamRow3Label;
    private javax.swing.JLabel greenTeamRow4Label;
    private javax.swing.JLabel greenTeamRow5Label;
    private javax.swing.JLabel greenTeamRow6Label;
    private javax.swing.JLabel greenTeamRow7Label;
    private javax.swing.JLabel greenTeamRow8Label;
    private javax.swing.JLabel greenTeamRow9Label;
    private javax.swing.JFormattedTextField greenTeamUserIdTextField0;
    private javax.swing.JFormattedTextField greenTeamUserIdTextField1;
    private javax.swing.JFormattedTextField greenTeamUserIdTextField10;
    private javax.swing.JFormattedTextField greenTeamUserIdTextField11;
    private javax.swing.JFormattedTextField greenTeamUserIdTextField12;
    private javax.swing.JFormattedTextField greenTeamUserIdTextField13;
    private javax.swing.JFormattedTextField greenTeamUserIdTextField14;
    private javax.swing.JFormattedTextField greenTeamUserIdTextField15;
    private javax.swing.JFormattedTextField greenTeamUserIdTextField2;
    private javax.swing.JFormattedTextField greenTeamUserIdTextField3;
    private javax.swing.JFormattedTextField greenTeamUserIdTextField4;
    private javax.swing.JFormattedTextField greenTeamUserIdTextField5;
    private javax.swing.JFormattedTextField greenTeamUserIdTextField6;
    private javax.swing.JFormattedTextField greenTeamUserIdTextField7;
    private javax.swing.JFormattedTextField greenTeamUserIdTextField8;
    private javax.swing.JFormattedTextField greenTeamUserIdTextField9;
    private javax.swing.JCheckBox redTeamCheckBox0;
    private javax.swing.JCheckBox redTeamCheckBox1;
    private javax.swing.JCheckBox redTeamCheckBox10;
    private javax.swing.JCheckBox redTeamCheckBox11;
    private javax.swing.JCheckBox redTeamCheckBox12;
    private javax.swing.JCheckBox redTeamCheckBox13;
    private javax.swing.JCheckBox redTeamCheckBox14;
    private javax.swing.JCheckBox redTeamCheckBox15;
    private javax.swing.JCheckBox redTeamCheckBox2;
    private javax.swing.JCheckBox redTeamCheckBox3;
    private javax.swing.JCheckBox redTeamCheckBox4;
    private javax.swing.JCheckBox redTeamCheckBox5;
    private javax.swing.JCheckBox redTeamCheckBox6;
    private javax.swing.JCheckBox redTeamCheckBox7;
    private javax.swing.JCheckBox redTeamCheckBox8;
    private javax.swing.JCheckBox redTeamCheckBox9;
    private javax.swing.JFormattedTextField redTeamCodeNameTextField0;
    private javax.swing.JFormattedTextField redTeamCodeNameTextField1;
    private javax.swing.JFormattedTextField redTeamCodeNameTextField10;
    private javax.swing.JFormattedTextField redTeamCodeNameTextField11;
    private javax.swing.JFormattedTextField redTeamCodeNameTextField12;
    private javax.swing.JFormattedTextField redTeamCodeNameTextField13;
    private javax.swing.JFormattedTextField redTeamCodeNameTextField14;
    private javax.swing.JFormattedTextField redTeamCodeNameTextField15;
    private javax.swing.JFormattedTextField redTeamCodeNameTextField2;
    private javax.swing.JFormattedTextField redTeamCodeNameTextField3;
    private javax.swing.JFormattedTextField redTeamCodeNameTextField4;
    private javax.swing.JFormattedTextField redTeamCodeNameTextField5;
    private javax.swing.JFormattedTextField redTeamCodeNameTextField6;
    private javax.swing.JFormattedTextField redTeamCodeNameTextField7;
    private javax.swing.JFormattedTextField redTeamCodeNameTextField8;
    private javax.swing.JFormattedTextField redTeamCodeNameTextField9;
    private javax.swing.JLabel redTeamLabel;
    private javax.swing.JPanel redTeamPanel;
    private javax.swing.JLabel redTeamRow0Label;
    private javax.swing.JLabel redTeamRow10Label;
    private javax.swing.JLabel redTeamRow11Label;
    private javax.swing.JLabel redTeamRow12Label;
    private javax.swing.JLabel redTeamRow13Label;
    private javax.swing.JLabel redTeamRow14Label;
    private javax.swing.JLabel redTeamRow15Label;
    private javax.swing.JLabel redTeamRow1Label;
    private javax.swing.JLabel redTeamRow2Label;
    private javax.swing.JLabel redTeamRow3Label;
    private javax.swing.JLabel redTeamRow4Label;
    private javax.swing.JLabel redTeamRow5Label;
    private javax.swing.JLabel redTeamRow6Label;
    private javax.swing.JLabel redTeamRow7Label;
    private javax.swing.JLabel redTeamRow8Label;
    private javax.swing.JLabel redTeamRow9Label;
    private javax.swing.JFormattedTextField redTeamUserIdTextField0;
    private javax.swing.JFormattedTextField redTeamUserIdTextField1;
    private javax.swing.JFormattedTextField redTeamUserIdTextField10;
    private javax.swing.JFormattedTextField redTeamUserIdTextField11;
    private javax.swing.JFormattedTextField redTeamUserIdTextField12;
    private javax.swing.JFormattedTextField redTeamUserIdTextField13;
    private javax.swing.JFormattedTextField redTeamUserIdTextField14;
    private javax.swing.JFormattedTextField redTeamUserIdTextField15;
    private javax.swing.JFormattedTextField redTeamUserIdTextField2;
    private javax.swing.JFormattedTextField redTeamUserIdTextField3;
    private javax.swing.JFormattedTextField redTeamUserIdTextField4;
    private javax.swing.JFormattedTextField redTeamUserIdTextField5;
    private javax.swing.JFormattedTextField redTeamUserIdTextField6;
    private javax.swing.JFormattedTextField redTeamUserIdTextField7;
    private javax.swing.JFormattedTextField redTeamUserIdTextField8;
    private javax.swing.JFormattedTextField redTeamUserIdTextField9;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
